#if PAINT_SOLID
    #define HAS_COLOR 1
#endif

#if PAINT_LINEAR || PAINT_RADIAL || PAINT_PATTERN
    #define HAS_UV0 1
#endif

#if CLAMP_PATTERN
    #define HAS_RECT 1
#endif

#if REPEAT_PATTERN || MIRRORU_PATTERN || MIRRORV_PATTERN || MIRROR_PATTERN
    #define HAS_RECT 1
    #define HAS_TILE 1
#endif

#if EFFECT_PATH_AA
    #define HAS_COVERAGE 1
#endif

#if EFFECT_SDF || EFFECT_SDF_LCD
    #define HAS_UV1 1
    #define HAS_ST1 1
    #define SDF_SCALE 7.96875
    #define SDF_BIAS 0.50196078431
    #define SDF_AA_FACTOR 0.65
    #define SDF_BASE_MIN 0.125
    #define SDF_BASE_MAX 0.25
    #define SDF_BASE_DEV -0.65
#endif

#if EFFECT_OPACITY
    #define HAS_UV1 1
#endif

#if EFFECT_SHADOW
    #define HAS_UV1 1
    #define HAS_RECT 1
#endif

#if EFFECT_BLUR
    #define HAS_UV1 1
#endif

#if EFFECT_DOWNSAMPLE
    #define HAS_UV0 1
    #define HAS_UV1 1
    #define HAS_UV2 1
    #define HAS_UV3 1
#endif

#if EFFECT_UPSAMPLE
    #define HAS_COLOR 1
    #define HAS_UV0 1
    #define HAS_UV1 1
#endif

#if EFFECT_CUSTOM
    #define HAS_COLOR 1
    #define HAS_UV0 1
    #define HAS_RECT 1
    #define HAS_IMAGE_POSITION 1
#endif

Texture2D pattern;
SamplerState patternSampler;

Texture2D ramps;
SamplerState rampsSampler;

Texture2D image;
SamplerState imageSampler;

Texture2D glyphs;
SamplerState glyphsSampler;

Texture2D shadow;
SamplerState shadowSampler;

ConstantBuffer Buffer0
{
#if EFFECT_RGBA
    float4 rgba;
#endif

#if PAINT_LINEAR || PAINT_PATTERN
    float opacity;
#endif

#if PAINT_RADIAL
    float4 radialGrad0;
    float3 radialGrad1;
#endif
};

#if EFFECT_BLUR
ConstantBuffer Buffer1
{
    float blend;
};
#endif

#if EFFECT_SHADOW
ConstantBuffer Buffer1
{
    float4 shadowColor;
    float2 shadowOffset;
    float blend;
};
#endif

struct In
{
#if HAS_COLOR
    nointerp float4 color: COLOR;
#endif

#if HAS_UV0
    float2 uv0: TEXCOORD0;
#endif

#if HAS_UV1
    float2 uv1: TEXCOORD1;
#endif

#if HAS_UV2
    float2 uv2: TEXCOORD2;
#endif

#if HAS_UV3
    float2 uv3: TEXCOORD3;
#endif

#if HAS_ST1
    float2 st1: TEXCOORD2;
#endif

#if HAS_COVERAGE
    float coverage: COVERAGE;
#endif

#if HAS_RECT
    nointerp float4 rect: RECT;
#endif

#if HAS_TILE
    nointerp float4 tile: TILE;
#endif

#if HAS_IMAGE_POSITION
    float4 imagePos: IMAGE_POSITION;
#endif
};

static In i_;
float4 main_brush(float2 uv);
float4 main_effect();

// warning D20087: unreferenced formal parameter
//#pragma warning (disable: 20087)
#define UNUSED(_x) (_x)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
SrtSignature sig
{
    DescriptorTable
    (
        NamedTexture(pattern), NamedSampler(patternSampler),
        NamedTexture(ramps), NamedSampler(rampsSampler),
        NamedTexture(image), NamedSampler(imageSampler),
        NamedTexture(glyphs), NamedSampler(glyphsSampler),
        NamedTexture(shadow), NamedSampler(shadowSampler)
    ),
    NamedConstantBuffer(Buffer0, flags = CONSTANT_BUFFER_KEEP_UNUSED_CONSTANTS | CONSTANT_BUFFER_USE_POINTER),
    NamedConstantBuffer(Buffer1, flags = CONSTANT_BUFFER_KEEP_UNUSED_CONSTANTS | CONSTANT_BUFFER_USE_POINTER),

    flags = REMOVE_UNUSED_ELEMENT | REMOVE_EMPTY_TABLE
}

#pragma argument(srtsignaturemissingresource=remove)

[srtsignature(sig)]
float4 main(in In i): S_TARGET_OUTPUT
{
    /////////////////////////////////////////////////////
    // Fetch paint color and opacity
    /////////////////////////////////////////////////////
    #if PAINT_SOLID
        float4 paint = i.color;
        float opacity_ = 1.0f;

    #elif PAINT_LINEAR
        float4 paint = ramps.Sample(rampsSampler, i.uv0);
        float opacity_ = opacity;

    #elif PAINT_RADIAL
        float dd = radialGrad1.x * i.uv0.x - radialGrad1.y * i.uv0.y;
        float u = radialGrad0.x * i.uv0.x + radialGrad0.y * i.uv0.y + radialGrad0.z *
            sqrt(i.uv0.x * i.uv0.x + i.uv0.y * i.uv0.y - dd * dd);
        float4 paint = ramps.Sample(rampsSampler, float2(u, radialGrad1.z));
        float opacity_ = radialGrad0.w;

    #elif PAINT_PATTERN
        #if CUSTOM_PATTERN
            float4 paint = main_brush(i.uv0);
        #elif CLAMP_PATTERN
            float inside = all(i.uv0 == clamp(i.uv0, i.rect.xy, i.rect.zw));
            float4 paint = inside * pattern.Sample(patternSampler, i.uv0);
        #elif REPEAT_PATTERN || MIRRORU_PATTERN || MIRRORV_PATTERN || MIRROR_PATTERN
            float2 uv = (i.uv0 - i.tile.xy) / i.tile.zw;
            #if REPEAT_PATTERN
                uv = frac(uv);
            #elif MIRRORU_PATTERN
                uv.x = abs(uv.x - 2.0 * floor((uv.x - 1.0) / 2.0) - 2.0);
                uv.y = frac(uv.y);
            #elif MIRRORV_PATTERN
                uv.x = frac(uv.x);
                uv.y = abs(uv.y - 2.0 * floor((uv.y - 1.0) / 2.0) - 2.0);
            #else 
                uv = abs(uv - 2.0 * floor((uv - 1.0) / 2.0) - 2.0);
            #endif
            uv = uv * i.tile.zw + i.tile.xy;
            float inside = all(uv == clamp(uv, i.rect.xy, i.rect.zw));
            float4 paint = inside * pattern.SampleGradient(patternSampler, uv, ddx(i.uv0), ddy(i.uv0));
        #else
            float4 paint = pattern.Sample(patternSampler, i.uv0);
        #endif
        float opacity_ = opacity;
    #endif

    /////////////////////////////////////////////////////
    // Apply selected effect
    /////////////////////////////////////////////////////
    #if EFFECT_RGBA
        UNUSED(i);
        return rgba;

    #elif EFFECT_MASK
        UNUSED(i);
        return float4(1, 1, 1, 1);

    #elif EFFECT_CLEAR
        UNUSED(i);
        return float4(0, 0, 0, 0);

    #elif EFFECT_PATH
        return opacity_ * paint;

    #elif EFFECT_PATH_AA
        return (opacity_ * i.coverage) * paint;

    #elif EFFECT_OPACITY
        return image.Sample(imageSampler, i.uv1) * (opacity_ * paint.a);

    #elif EFFECT_SHADOW
        float2 uv = clamp(i.uv1 - shadowOffset, i.rect.xy, i.rect.zw);
        float alpha = lerp(image.Sample(imageSampler, uv).a, shadow.Sample(shadowSampler, uv).a, blend);
        float4 img = image.Sample(imageSampler, clamp(i.uv1, i.rect.xy, i.rect.zw));
        return (img + (1.0 - img.a) * (shadowColor * alpha)) * (opacity_ * paint.a);

    #elif EFFECT_BLUR
        return lerp(image.Sample(imageSampler, i.uv1), shadow.Sample(shadowSampler, i.uv1), blend) * (opacity_ * paint.a);

    #elif EFFECT_SDF
        float4 color = glyphs.Sample(glyphsSampler, i.uv1);
        float distance = SDF_SCALE * (color.r - SDF_BIAS);

        float2 grad = ddx(i.st1);
        float gradLen = length(grad);
        float scale = 1.0 / gradLen;
        float base = SDF_BASE_DEV * (1.0f - (clamp(scale, SDF_BASE_MIN, SDF_BASE_MAX) - SDF_BASE_MIN) / (SDF_BASE_MAX - SDF_BASE_MIN));
        float range = SDF_AA_FACTOR * gradLen;
        float alpha = smoothstep(base - range, base + range, distance);

        return (alpha * opacity_) * paint;

    #elif EFFECT_DOWNSAMPLE
        return
        (
            pattern.Sample(patternSampler, i.uv0) +
            pattern.Sample(patternSampler, i.uv1) +
            pattern.Sample(patternSampler, i.uv2) +
            pattern.Sample(patternSampler, i.uv3)
        ) * 0.25;

    #elif EFFECT_UPSAMPLE
        return lerp(image.Sample(imageSampler, i.uv1), pattern.Sample(patternSampler, i.uv0), i.color.a);

    #elif EFFECT_CUSTOM
        i_ = i;
        return main_effect() * (opacity_ * paint.a);

    #else
        #error EFFECT not defined
    #endif
}
