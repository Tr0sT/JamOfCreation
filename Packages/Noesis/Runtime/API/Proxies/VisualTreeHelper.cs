//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public static class VisualTreeHelper {
  public static DependencyObject GetRoot(DependencyObject reference) {
    if (reference == null) throw new ArgumentNullException("reference");
    return GetRootHelper(reference);
  }

  public static DependencyObject GetParent(DependencyObject reference) {
    if (reference == null) throw new ArgumentNullException("reference");
    return GetParentHelper(reference);
  }

  public static int GetChildrenCount(DependencyObject reference) {
    if (reference == null) throw new ArgumentNullException("reference");
    return GetChildrenCountHelper(reference);
  }

  public static DependencyObject GetChild(DependencyObject reference, int childIndex) {
    if (reference == null) throw new ArgumentNullException("reference");
    if (childIndex < 0) throw new ArgumentOutOfRangeException("childIndex");
    if (childIndex >= GetChildrenCount(reference)) throw new ArgumentOutOfRangeException("childIndex");
    return GetChildHelper(reference, childIndex);
  }

  public static HitTestResult HitTest(Visual reference, Point point) {
    if (reference == null) throw new ArgumentNullException("reference");
    HitTestResult result = new HitTestResult();
    HitTestHelper(reference, point, ref result);
    return result;
  }

  public static void HitTest(Visual reference, HitTestFilterCallback filterCallback, HitTestResultCallback resultCallback, HitTestParameters hitTestParameters) {
    if (reference == null) throw new ArgumentNullException("reference");
    if (_filter != null || _result != null) throw new InvalidOperationException("Calling HitTest recursively");
    _filter = filterCallback; _result = resultCallback;
    PointHitTestParameters pointParams = (PointHitTestParameters)hitTestParameters;
    HitTestCallbackHelper(reference, pointParams.HitPoint, _hitTestFilter, _hitTestResult);
    _filter = null; _result = null;
  }
  
  public static HitTest3DResult HitTest3D(Visual reference, Point3D point, Vector3D direction) {
    if (reference == null) throw new ArgumentNullException("reference");
    HitTest3DResult result = new HitTest3DResult();
    HitTest3DHelper(reference, point, new Point3D(direction.X, direction.Y, direction.Z), ref result);
    return result;
  }

  public static void HitTest3D(Visual reference, Point3D point, Vector3D direction, HitTestFilterCallback filterCallback, HitTest3DResultCallback resultCallback) {
    if (reference == null) throw new ArgumentNullException("reference");
    if (_filter != null || _result3D != null) throw new InvalidOperationException("Calling HitTest3D recursively");
    _filter = filterCallback; _result3D = resultCallback;
    HitTest3DCallbackHelper(reference, point, direction, _hitTestFilter, _hitTest3DResult);
    _filter = null; _result3D = null;
  }

  #region HitTest callbacks
  private delegate HitTestFilterBehavior Callback_HitTestFilter(IntPtr targetPtr);
  private static Callback_HitTestFilter _hitTestFilter = OnHitTestFilter;

  [MonoPInvokeCallback(typeof(Callback_HitTestFilter))]
  private static HitTestFilterBehavior OnHitTestFilter(IntPtr targetPtr) {
    try {
      return _filter((Visual)Extend.GetProxy(targetPtr, false));
    }
    catch (Exception e)
    {
      Noesis.Error.UnhandledException(e);
      return HitTestFilterBehavior.Stop;
    }
  }

  private delegate HitTestResultBehavior Callback_HitTestResult(IntPtr hitPtr);
  private static Callback_HitTestResult _hitTestResult = OnHitTestResult;
  private static Callback_HitTestResult _hitTest3DResult = OnHitTest3DResult;

  [MonoPInvokeCallback(typeof(Callback_HitTestResult))]
  private static HitTestResultBehavior OnHitTestResult(IntPtr hitPtr) {
    try {
      return _result(Marshal.PtrToStructure<HitTestResult>(hitPtr));
    }
    catch (Exception e)
    {
      Noesis.Error.UnhandledException(e);
      return HitTestResultBehavior.Stop;
    }
  }

  [MonoPInvokeCallback(typeof(Callback_HitTestResult))]
  private static HitTestResultBehavior OnHitTest3DResult(IntPtr hitPtr) {
    try {
      return _result3D(Marshal.PtrToStructure<HitTest3DResult>(hitPtr));
    }
    catch (Exception e)
    {
      Noesis.Error.UnhandledException(e);
      return HitTestResultBehavior.Stop;
    }
  }

  [ThreadStatic]
  static private HitTestFilterCallback _filter = null;

  [ThreadStatic]
  static private HitTestResultCallback _result = null;

  [ThreadStatic]
  static private HitTest3DResultCallback _result3D = null;

  private static void HitTestCallbackHelper(Visual reference, Point point, Callback_HitTestFilter filter, Callback_HitTestResult result) {
    VisualTreeHelper_HitTestCallback(Visual.getCPtr(reference), ref point, filter, result);
  }

  private static void HitTest3DCallbackHelper(Visual reference, Point3D point, Vector3D direction, Callback_HitTestFilter filter, Callback_HitTestResult result) {
    VisualTreeHelper_HitTest3DCallback(Visual.getCPtr(reference), ref point, ref direction, filter, result);
  }

  [DllImport(Library.Name)]
  private static extern void VisualTreeHelper_HitTestCallback(HandleRef reference, ref Point point, Callback_HitTestFilter filter, Callback_HitTestResult result);

  [DllImport(Library.Name)]
  private static extern void VisualTreeHelper_HitTest3DCallback(HandleRef reference, ref Point3D point, ref Vector3D direction, Callback_HitTestFilter filter, Callback_HitTestResult result);
  #endregion

  public static bool IntersectPlane(Visual reference, Point3D point, Vector3D direction, out Point3D outPoint) {
    if (reference == null) throw new ArgumentNullException("reference");
    outPoint = new Point3D();
    return IntersectPlaneHelper(reference, point, new Point3D(direction.X, direction.Y, direction.Z), ref outPoint);
  }

  public static Rect GetContentBounds(Visual visual) {
    if (visual == null) throw new ArgumentNullException("visual");
    {
      IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetContentBounds(Visual.getCPtr(visual));
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Rect>(ret);
      }
      else {
        return new Rect();
      }
    }
  }

  public static Rect GetDescendantBounds(Visual visual) {
    if (visual == null) throw new ArgumentNullException("visual");
    {
      IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetDescendantBounds(Visual.getCPtr(visual));
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Rect>(ret);
      }
      else {
        return new Rect();
      }
    }
  }

  public static float GetDescendantBoundsMinZ(Visual visual) {
    if (visual == null) throw new ArgumentNullException("visual");
    {
      float ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetDescendantBoundsMinZ(Visual.getCPtr(visual));
      return ret;
    }
  }

  public static float GetDescendantBoundsMaxZ(Visual visual) {
    if (visual == null) throw new ArgumentNullException("visual");
    {
      float ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetDescendantBoundsMaxZ(Visual.getCPtr(visual));
      return ret;
    }
  }

  public static Point GetOffset(Visual visual) {
    if (visual == null) throw new ArgumentNullException("visual");
    {
      IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetOffset(Visual.getCPtr(visual));
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Point>(ret);
      }
      else {
        return new Point();
      }
    }
  }

  public static Size GetSize(Visual visual) {
    if (visual == null) throw new ArgumentNullException("visual");
    {
      IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetSize(Visual.getCPtr(visual));
      if (ret != IntPtr.Zero) {
        return Marshal.PtrToStructure<Size>(ret);
      }
      else {
        return new Size();
      }
    }
  }

  public static Geometry GetClip(Visual visual) {
    if (visual == null) throw new ArgumentNullException("visual");
    {
      IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetClip(Visual.getCPtr(visual));
      return (Geometry)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  private static DependencyObject GetRootHelper(DependencyObject reference) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetRootHelper(DependencyObject.getCPtr(reference));
    return (DependencyObject)Noesis.Extend.GetProxy(cPtr, false);
  }

  private static DependencyObject GetParentHelper(DependencyObject reference) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetParentHelper(DependencyObject.getCPtr(reference));
    return (DependencyObject)Noesis.Extend.GetProxy(cPtr, false);
  }

  private static int GetChildrenCountHelper(DependencyObject reference) {
    int ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetChildrenCountHelper(DependencyObject.getCPtr(reference));
    return ret;
  }

  private static DependencyObject GetChildHelper(DependencyObject reference, int childIndex) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetChildHelper(DependencyObject.getCPtr(reference), childIndex);
    return (DependencyObject)Noesis.Extend.GetProxy(cPtr, false);
  }

  private static void HitTestHelper(Visual reference, Point point, ref HitTestResult result) {
    NoesisGUI_PINVOKE.VisualTreeHelper_HitTestHelper(Visual.getCPtr(reference), ref point, ref result);
  }

  private static void HitTest3DHelper(Visual reference, Point3D point, Point3D direction, ref HitTest3DResult result) {
    NoesisGUI_PINVOKE.VisualTreeHelper_HitTest3DHelper(Visual.getCPtr(reference), ref point, ref direction, ref result);
  }

  private static bool IntersectPlaneHelper(Visual reference, Point3D point, Point3D direction, ref Point3D outPoint) {
    bool ret = NoesisGUI_PINVOKE.VisualTreeHelper_IntersectPlaneHelper(Visual.getCPtr(reference), ref point, ref direction, ref outPoint);
    return ret;
  }

}

}

