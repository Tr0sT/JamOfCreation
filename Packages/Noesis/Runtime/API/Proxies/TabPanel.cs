//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;

namespace Noesis
{

public class TabPanel : Panel {
  internal new static TabPanel CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new TabPanel(cPtr, cMemoryOwn);
  }

  internal TabPanel(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(TabPanel obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected override Size MeasureOverride(Size availableSize) {
    Size desiredSize = Size.Empty;
    MeasureOverrideHelper(availableSize, ref desiredSize);
    return desiredSize;
  }

  protected override Size ArrangeOverride(Size finalSize) {
    Size renderSize = Size.Empty;
    ArrangeOverrideHelper(finalSize, ref renderSize);
    return renderSize;
  }

  [DynamicDependency("Extend")]
  public TabPanel() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if (type == typeof(TabPanel)) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_TabPanel();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  private void MeasureOverrideHelper(Size availableSize, ref Size desiredSize) {
    NoesisGUI_PINVOKE.TabPanel_MeasureOverrideHelper(swigCPtr, ref availableSize, ref desiredSize);
  }

  private void ArrangeOverrideHelper(Size finalSize, ref Size renderSize) {
    NoesisGUI_PINVOKE.TabPanel_ArrangeOverrideHelper(swigCPtr, ref finalSize, ref renderSize);
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_TabPanel(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

