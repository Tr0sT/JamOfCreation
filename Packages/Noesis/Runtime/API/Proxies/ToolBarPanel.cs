//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;

namespace Noesis
{

public class ToolBarPanel : StackPanel {
  internal new static ToolBarPanel CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new ToolBarPanel(cPtr, cMemoryOwn);
  }

  internal ToolBarPanel(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(ToolBarPanel obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected override int VisualChildrenCount {
    get {
      return (int)GetVisualChildrenCountHelper();
    }
  }

  protected override Visual GetVisualChild(int index) {
    return GetVisualChildHelper((uint)index);
  }

  protected override Size MeasureOverride(Size availableSize) {
    Size desiredSize = Size.Empty;
    MeasureOverrideHelper(availableSize, ref desiredSize);
    return desiredSize;
  }

  protected override Size ArrangeOverride(Size finalSize) {
    Size renderSize = Size.Empty;
    ArrangeOverrideHelper(finalSize, ref renderSize);
    return renderSize;
  }

  [DynamicDependency("Extend")]
  public ToolBarPanel() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if (type == typeof(ToolBarPanel)) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_ToolBarPanel();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  private uint GetVisualChildrenCountHelper() {
    uint ret = NoesisGUI_PINVOKE.ToolBarPanel_GetVisualChildrenCountHelper(swigCPtr);
    return ret;
  }

  private Visual GetVisualChildHelper(uint index) {
    IntPtr cPtr = NoesisGUI_PINVOKE.ToolBarPanel_GetVisualChildHelper(swigCPtr, index);
    return (Visual)Noesis.Extend.GetProxy(cPtr, false);
  }

  private void MeasureOverrideHelper(Size availableSize, ref Size desiredSize) {
    NoesisGUI_PINVOKE.ToolBarPanel_MeasureOverrideHelper(swigCPtr, ref availableSize, ref desiredSize);
  }

  private void ArrangeOverrideHelper(Size finalSize, ref Size renderSize) {
    NoesisGUI_PINVOKE.ToolBarPanel_ArrangeOverrideHelper(swigCPtr, ref finalSize, ref renderSize);
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_ToolBarPanel(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

