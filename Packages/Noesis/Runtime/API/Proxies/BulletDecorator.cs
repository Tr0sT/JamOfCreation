//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Diagnostics.CodeAnalysis;

namespace Noesis
{

public class BulletDecorator : Decorator {
  internal new static BulletDecorator CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new BulletDecorator(cPtr, cMemoryOwn);
  }

  internal BulletDecorator(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(BulletDecorator obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected override int VisualChildrenCount {
    get {
      return (int)GetVisualChildrenCountHelper();
    }
  }

  protected override Visual GetVisualChild(int index) {
    return GetVisualChildHelper((uint)index);
  }

  protected override void OnRender(DrawingContext context) {
    OnRenderHelper(context);
  }

  protected override Size MeasureOverride(Size availableSize) {
    Size desiredSize = Size.Empty;
    MeasureOverrideHelper(availableSize, ref desiredSize);
    return desiredSize;
  }

  protected override Size ArrangeOverride(Size finalSize) {
    Size renderSize = Size.Empty;
    ArrangeOverrideHelper(finalSize, ref renderSize);
    return renderSize;
  }

  [DynamicDependency("Extend")]
  public BulletDecorator() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    if (type == typeof(BulletDecorator)) {
      registerExtend = false;
      return NoesisGUI_PINVOKE.new_BulletDecorator();
    }
    else {
      return base.CreateExtendCPtr(type, out registerExtend);
    }
  }

  public static DependencyProperty BackgroundProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.BulletDecorator_BackgroundProperty_get();
      return (DependencyProperty)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Brush Background {
    set {
      NoesisGUI_PINVOKE.BulletDecorator_Background_set(swigCPtr, Brush.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.BulletDecorator_Background_get(swigCPtr);
      return (Brush)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public UIElement Bullet {
    set {
      NoesisGUI_PINVOKE.BulletDecorator_Bullet_set(swigCPtr, UIElement.getCPtr(value));
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.BulletDecorator_Bullet_get(swigCPtr);
      return (UIElement)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  private uint GetVisualChildrenCountHelper() {
    uint ret = NoesisGUI_PINVOKE.BulletDecorator_GetVisualChildrenCountHelper(swigCPtr);
    return ret;
  }

  private Visual GetVisualChildHelper(uint index) {
    IntPtr cPtr = NoesisGUI_PINVOKE.BulletDecorator_GetVisualChildHelper(swigCPtr, index);
    return (Visual)Noesis.Extend.GetProxy(cPtr, false);
  }

  private void OnRenderHelper(DrawingContext context) {
    NoesisGUI_PINVOKE.BulletDecorator_OnRenderHelper(swigCPtr, DrawingContext.getCPtr(context));
  }

  private void MeasureOverrideHelper(Size availableSize, ref Size desiredSize) {
    NoesisGUI_PINVOKE.BulletDecorator_MeasureOverrideHelper(swigCPtr, ref availableSize, ref desiredSize);
  }

  private void ArrangeOverrideHelper(Size finalSize, ref Size renderSize) {
    NoesisGUI_PINVOKE.BulletDecorator_ArrangeOverrideHelper(swigCPtr, ref finalSize, ref renderSize);
  }

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_BulletDecorator(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

